import streamlit as st
import pandas as pd
from utils import render_aligned_image

def show_popular_books(books_df):
    """Affiche l'onglet des livres populaires avec am√©liorations."""
    st.subheader("üìà Livres populaires")
    
    # AM√âLIORATION 1: Validation des donn√©es
    if books_df.empty:
        st.warning("‚ö†Ô∏è Aucune donn√©e de livre disponible")
        return
    
    if 'Rating-Count' not in books_df.columns:
        st.error("‚ùå Colonne Rating-Count non trouv√©e dans le dataset")
        return
    
    # AM√âLIORATION 2: Options de personalisation pour l'utilisateur
    col1, col2 = st.columns(2)
    with col1:
        num_books = st.selectbox(
            "Nombre de livres √† afficher :",
            options=[5, 10, 15, 20],
            key="tab5_num_books"  # 10 par d√©faut
        )
    
    with col2:
        st.info("üìä Classement bas√© sur le **nombre total d'√©valuations** re√ßues")
    
        # Tri par nombre de ratings (code original)
    popular_books = (
        books_df.sort_values(by="Rating-Count", ascending=False)
        .drop_duplicates(subset="Book-Title")
        .head(num_books)
    )
    
    #V√©rification qu'on a des r√©sultats
    if popular_books.empty:
        st.warning("‚ö†Ô∏è Aucun livre trouv√© correspondant aux crit√®res")
        return
    
    # Information pour l'utilisateur
    st.info(f"üìä Affichage du top {len(popular_books)} livres les plus populaires")
    
    #  Layout responsive
    # Calcul dynamique du nombre de colonnes selon le nombre de livres
    if len(popular_books) <= 3:
        num_cols = len(popular_books)
    elif len(popular_books) <= 5:
        num_cols = min(5, len(popular_books))
    else:
        # Pour plus de 5 livres, afficher sur plusieurs lignes
        num_cols = 5
    
    # Cr√©er les colonnes
    cols = st.columns(num_cols)
    
    # Affichage avec gestion d'erreurs
    for idx in range(len(popular_books)):
        col_idx = idx % num_cols  # Pour g√©rer les lignes multiples
        
        # Extraire les donn√©es avec gestion d'erreurs
        try:
            book_title = popular_books.iloc[idx]["Book-Title"]
            rating_count = popular_books.iloc[idx]["Rating-Count"]
            
            # AM√âLIORATION 8: Priorit√© aux images API puis fallback
            api_image = popular_books.iloc[idx].get("api_cover_url")
            original_image = popular_books.iloc[idx].get("Image-URL-L")
            
            if pd.notna(api_image) and api_image and api_image.startswith('http'):
                book_image = api_image
            elif pd.notna(original_image) and original_image and original_image.startswith('http'):
                book_image = original_image
            else:
                book_image = "https://via.placeholder.com/300x400/cccccc/666666?text=Pas+de+Couverture"
            
            #Titre tronqu√© pour l'affichage
            display_title = book_title if len(book_title) <= 40 else book_title[:37] + "..."
    
            
        except Exception as e:
            st.error(f"‚ùå Erreur lors du traitement du livre {idx + 1}: {str(e)}")
            continue
        
        # Affichage dans la colonne appropri√©e
        with cols[col_idx]:
            # Image avec titre
            cols[col_idx].markdown(
                render_aligned_image(book_image, display_title),
                unsafe_allow_html=True
            )
            
            # M√©trique sous l'image
            cols[col_idx].metric(
                label="Popularit√©",
                value=f"üìä {rating_count} √©valuations",
                help=f"Titre complet: {book_title}"
            )
            
# AM√âLIORATION 11: Badge de popularit√©
            if rating_count >= 200:
                cols[col_idx].markdown("üî• **Tr√®s populaire**", help="Plus de 200 √©valuations")
            elif rating_count >= 100:
                cols[col_idx].markdown("üìà **Populaire**", help="Plus de 100 √©valuations")
            elif rating_count >= 50:
                cols[col_idx].markdown("üëç **Appr√©ci√©**", help="Plus de 50 √©valuations")
            else:
                cols[col_idx].markdown("üìö **D√©couverte**", help="Livre en cours de d√©couverte")
            
            # Bouton d'action
            if st.button(f"üìñ D√©tails", key=f"details_popular_{idx}"):
                # Calculer la note moyenne si disponible
                if 'Book-Rating' in books_df.columns:
                    book_ratings = books_df[books_df['Book-Title'] == book_title]['Book-Rating']
                    avg_rating = book_ratings.mean()
                    st.info(f"üìö **{book_title}**\n\nüìä **{rating_count} √©valuations**\n‚≠ê **Note moyenne: {avg_rating:.1f}/10**")
                else:
                    st.info(f"üìö **{book_title}**\n\nüìä **{rating_count} √©valuations**")
    
    # AM√âLIORATION 12: Statistiques sp√©cialis√©es pour la popularit√©
    with st.expander("üìä Statistiques de popularit√©"):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            total_evaluations = popular_books['Rating-Count'].sum()
            st.metric(
                "Total √©valuations",
                f"{total_evaluations:,}",
                help="Somme des √©valuations de tous les livres affich√©s"
            )
        
        with col2:
            avg_popularity = popular_books['Rating-Count'].mean()
            st.metric(
                "Popularit√© moyenne",
                f"{avg_popularity:.0f}",
                help="Nombre moyen d'√©valuations par livre affich√©"
            )
        
        with col3:
            max_popularity = popular_books['Rating-Count'].max()
            st.metric(
                "Plus populaire",
                f"{max_popularity} √©valuations",
                help="Livre avec le plus d'√©valuations"
            )
        
        # Graphique de distribution de popularit√©
        if len(popular_books) > 3:
            st.subheader("üìà Distribution de popularit√©")
            popularity_data = popular_books.set_index('Book-Title')['Rating-Count'].head(10)
            st.bar_chart(popularity_data)
